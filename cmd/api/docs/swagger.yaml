basePath: /api/v1
definitions:
  domain.ChunkedUploadStatus:
    enum:
    - active
    - completed
    - failed
    - expired
    type: string
    x-enum-varnames:
    - ChunkedUploadStatusActive
    - ChunkedUploadStatusCompleted
    - ChunkedUploadStatusFailed
    - ChunkedUploadStatusExpired
  domain.CircuitBreakerState:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - CircuitClosed
    - CircuitOpen
    - CircuitHalfOpen
  domain.FileType:
    enum:
    - file
    - folder
    type: string
    x-enum-varnames:
    - FileTypeFile
    - FileTypeFolder
  domain.ResourceStats:
    properties:
      active_uploads:
        type: integer
      circuit_state:
        $ref: '#/definitions/domain.CircuitBreakerState'
      failures:
        type: integer
      max_uploads:
        type: integer
      memory_usage:
        $ref: '#/definitions/domain.ResourceUsage'
    type: object
  domain.ResourceUsage:
    properties:
      current:
        type: integer
      limit:
        type: integer
      system_total:
        type: integer
      system_used:
        type: integer
    type: object
  domain.StrategyInfo:
    properties:
      chunk_size:
        type: integer
      file_size:
        type: integer
      requires_chunks:
        type: boolean
      strategy:
        $ref: '#/definitions/domain.UploadStrategy'
      total_chunks:
        type: integer
    type: object
  domain.UploadStrategy:
    enum:
    - memory
    - stream
    - chunked
    type: string
    x-enum-varnames:
    - UploadStrategyMemory
    - UploadStrategyStream
    - UploadStrategyChunked
  errors.ErrorResponse:
    properties:
      code:
        type: integer
      error:
        type: string
      message:
        type: string
      time:
        type: string
    type: object
  hdAuth.JwtAuth:
    properties:
      expire_time:
        type: string
      token:
        type: string
    type: object
  hdAuth.LoginResponseDto:
    properties:
      auth:
        $ref: '#/definitions/hdAuth.JwtAuth'
      company_id:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      role_id:
        type: string
      username:
        type: string
    type: object
  hdAuth.RequestLoginDto:
    properties:
      login:
        type: string
      password:
        type: string
    required:
    - login
    - password
    type: object
  hdAuth.RequestRefreshTokenDto:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  hdAuth.ResponseLoginDto:
    properties:
      answer:
        $ref: '#/definitions/hdAuth.LoginResponseDto'
      status:
        type: string
      time:
        type: string
    type: object
  hdAuth.ResponseRefreshTokenDto:
    properties:
      answer:
        $ref: '#/definitions/hdAuth.LoginResponseDto'
      status:
        type: string
      time:
        type: string
    type: object
  hdCompany.CompanyDto:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
      path:
        type: string
    type: object
  hdCompany.RequestRegisterCompanyDto:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - description
    - name
    type: object
  hdCompany.RequestUpdateCompanyDto:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  hdCompany.ResponseCompaniesDto:
    properties:
      answer:
        items:
          $ref: '#/definitions/hdCompany.CompanyDto'
        type: array
      status:
        type: string
      time:
        type: string
    type: object
  hdCompany.ResponseCompanyDto:
    properties:
      answer:
        $ref: '#/definitions/hdCompany.CompanyDto'
      status:
        type: string
      time:
        type: string
    type: object
  hdCompany.ResponseDeleteCompanyDto:
    properties:
      status:
        type: string
      time:
        type: string
    type: object
  hdFileFolder.FolderFileDTO:
    properties:
      company_id:
        type: string
      created_at:
        type: string
      full_path:
        type: string
      id:
        type: string
      mime_type:
        type: string
      name:
        type: string
      parent_id:
        type: string
      size:
        type: integer
      storage_path:
        type: string
      type:
        $ref: '#/definitions/domain.FileType'
      updated_at:
        type: string
      user_created_id:
        type: string
    type: object
  hdFileFolder.RequestCreateFolder:
    properties:
      name:
        type: string
      parentPath:
        type: string
    required:
    - name
    - parentPath
    type: object
  hdFileFolder.RequestGetFolder:
    properties:
      path:
        type: string
      type:
        $ref: '#/definitions/domain.FileType'
    required:
    - path
    type: object
  hdFileFolder.RequestInitChunkedUpload:
    properties:
      fileName:
        type: string
      fileSize:
        minimum: 1
        type: integer
      mimeType:
        type: string
      parentPath:
        type: string
    required:
    - fileName
    - fileSize
    - parentPath
    type: object
  hdFileFolder.RequestMoveFile:
    properties:
      parentPath:
        type: string
    required:
    - parentPath
    type: object
  hdFileFolder.RequestMoveFolder:
    properties:
      parentPath:
        type: string
    required:
    - parentPath
    type: object
  hdFileFolder.RequestRenameFile:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  hdFileFolder.RequestRenameFolder:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  hdFileFolder.ResponseChunkedUploadStatus:
    properties:
      expires_at:
        type: string
      file_name:
        type: string
      missing_chunks:
        items:
          type: integer
        type: array
      progress:
        type: number
      status:
        type: string
      time:
        type: string
      total_chunks:
        type: integer
      total_size:
        type: integer
      upload_id:
        type: string
      upload_status:
        $ref: '#/definitions/domain.ChunkedUploadStatus'
      uploaded_chunks:
        type: integer
      uploaded_size:
        type: integer
    type: object
  hdFileFolder.ResponseCompleteChunkedUpload:
    properties:
      file:
        $ref: '#/definitions/hdFileFolder.FolderFileDTO'
      status:
        type: string
      time:
        type: string
    type: object
  hdFileFolder.ResponseFile:
    properties:
      file:
        $ref: '#/definitions/hdFileFolder.FolderFileDTO'
      status:
        type: string
      time:
        type: string
    type: object
  hdFileFolder.ResponseFolder:
    properties:
      folder:
        $ref: '#/definitions/hdFileFolder.FolderFileDTO'
      status:
        type: string
      time:
        type: string
    type: object
  hdFileFolder.ResponseGetFolder:
    properties:
      files:
        items:
          $ref: '#/definitions/hdFileFolder.FolderFileDTO'
        type: array
      status:
        type: string
      time:
        type: string
    type: object
  hdFileFolder.ResponseInitChunkedUpload:
    properties:
      chunk_size:
        type: integer
      status:
        type: string
      strategy:
        $ref: '#/definitions/domain.StrategyInfo'
      time:
        type: string
      total_chunks:
        type: integer
      upload_id:
        type: string
    type: object
  hdFileFolder.ResponsePath:
    properties:
      path:
        type: string
      status:
        type: string
      time:
        type: string
    type: object
  hdFileFolder.ResponseResourceStats:
    properties:
      stats:
        $ref: '#/definitions/domain.ResourceStats'
      status:
        type: string
      time:
        type: string
    type: object
  hdFileFolder.ResponseSuccess:
    properties:
      message:
        type: string
      status:
        type: string
      time:
        type: string
    type: object
  hdFileFolder.ResponseUploadChunk:
    properties:
      chunk_index:
        type: integer
      progress:
        type: number
      status:
        type: string
      time:
        type: string
      total_chunks:
        type: integer
      uploaded_chunks:
        type: integer
    type: object
  hdFileFolder.ResponseUploadStrategy:
    properties:
      status:
        type: string
      strategy:
        $ref: '#/definitions/domain.StrategyInfo'
      time:
        type: string
    type: object
  hdUser.RequestChangePasswordDto:
    properties:
      new_password:
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  hdUser.RequestRegistrationUserDto:
    properties:
      company_id:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone:
        type: string
      role_name:
        type: string
      second_name:
        type: string
      username:
        type: string
    required:
    - company_id
    - email
    - first_name
    - last_name
    - password
    - role_name
    - username
    type: object
  hdUser.RequestTransferCompanyDto:
    properties:
      company_id:
        type: string
    required:
    - company_id
    type: object
  hdUser.RequestUpdateRoleDto:
    properties:
      role_id:
        type: string
    required:
    - role_id
    type: object
  hdUser.RequestUpdateUserDto:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      phone:
        type: string
      second_name:
        type: string
      username:
        type: string
    type: object
  hdUser.ResponseMessageDto:
    properties:
      message:
        type: string
      status:
        type: string
      time:
        type: string
    type: object
  hdUser.ResponseUserDto:
    properties:
      answer:
        $ref: '#/definitions/hdUser.UserDto'
      status:
        type: string
      time:
        type: string
    type: object
  hdUser.ResponseUsersDto:
    properties:
      answer:
        items:
          $ref: '#/definitions/hdUser.UserDto'
        type: array
      status:
        type: string
      time:
        type: string
    type: object
  hdUser.UserDto:
    properties:
      company_id:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      last_name:
        type: string
      phone:
        type: string
      role_id:
        type: string
      second_name:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This project is being developed as a cloud storage
  title: Go-Storage
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates user and returns JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/hdAuth.RequestLoginDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdAuth.ResponseLoginDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: User login
      tags:
      - auth
  /auth/refresh-token:
    post:
      consumes:
      - application/json
      description: Refreshes JWT authentication token
      parameters:
      - description: Refresh token payload
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/hdAuth.RequestRefreshTokenDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdAuth.ResponseRefreshTokenDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Refresh JWT token
      tags:
      - auth
  /companies/:
    get:
      description: Returns a list of all active companies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdCompany.ResponseCompaniesDto'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all companies
      tags:
      - companies
    post:
      consumes:
      - application/json
      description: Creates a new company and assigns a unique storage path
      parameters:
      - description: Company payload
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/hdCompany.RequestRegisterCompanyDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdCompany.ResponseCompanyDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Register new company
      tags:
      - companies
  /companies/{id}:
    delete:
      description: Soft-deletes (deactivates) a company by ID
      parameters:
      - description: Company ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdCompany.ResponseDeleteCompanyDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete company
      tags:
      - companies
    get:
      description: Returns a company by its UUID
      parameters:
      - description: Company ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdCompany.ResponseCompanyDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get company by ID
      tags:
      - companies
    put:
      consumes:
      - application/json
      description: Updates name and/or description of the company
      parameters:
      - description: Company ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Fields to update
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/hdCompany.RequestUpdateCompanyDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdCompany.ResponseCompanyDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update company
      tags:
      - companies
  /companies/me:
    get:
      description: Returns your company information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdCompany.ResponseCompanyDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get my company
      tags:
      - companies
    put:
      consumes:
      - application/json
      description: Updates your company information (company admin only)
      parameters:
      - description: Fields to update
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/hdCompany.RequestUpdateCompanyDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdCompany.ResponseCompanyDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update my company
      tags:
      - companies
  /files/{id}:
    delete:
      description: Deletes a file from the system
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdFileFolder.ResponseSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete file
      tags:
      - files
    get:
      description: Returns metadata about a file
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdFileFolder.ResponseFile'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get file information
      tags:
      - files
  /files/{id}/download:
    get:
      description: Downloads a file by ID
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      - description: Display inline instead of attachment
        in: query
        name: inline
        type: boolean
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Download file
      tags:
      - files
  /files/{id}/move:
    put:
      consumes:
      - application/json
      description: Moves a file to a new location
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      - description: New parent path
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/hdFileFolder.RequestMoveFile'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdFileFolder.ResponseFile'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Move file
      tags:
      - files
  /files/{id}/rename:
    put:
      consumes:
      - application/json
      description: Renames a file
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      - description: New file name
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/hdFileFolder.RequestRenameFile'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdFileFolder.ResponseFile'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Rename file
      tags:
      - files
  /files/chunked/{uploadId}/abort:
    delete:
      description: Aborts a chunked upload session and cleans up temporary data
      parameters:
      - description: Upload session ID
        in: path
        name: uploadId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdFileFolder.ResponseSuccess'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Abort chunked upload
      tags:
      - chunked-upload
  /files/chunked/{uploadId}/chunk/{chunkIndex}:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a single chunk of a file in a chunked upload session
      parameters:
      - description: Upload session ID
        in: path
        name: uploadId
        required: true
        type: string
      - description: Chunk index (0-based)
        in: path
        name: chunkIndex
        required: true
        type: string
      - description: Chunk data
        in: formData
        name: chunk
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdFileFolder.ResponseUploadChunk'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload file chunk
      tags:
      - chunked-upload
  /files/chunked/{uploadId}/complete:
    post:
      description: Completes a chunked upload session and creates the final file
      parameters:
      - description: Upload session ID
        in: path
        name: uploadId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdFileFolder.ResponseCompleteChunkedUpload'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Complete chunked upload
      tags:
      - chunked-upload
  /files/chunked/{uploadId}/status:
    get:
      description: Returns the current status of a chunked upload session
      parameters:
      - description: Upload session ID
        in: path
        name: uploadId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdFileFolder.ResponseChunkedUploadStatus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get chunked upload status
      tags:
      - chunked-upload
  /files/chunked/init:
    post:
      consumes:
      - application/json
      description: Initializes a chunked upload session for large files
      parameters:
      - description: Upload initialization details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/hdFileFolder.RequestInitChunkedUpload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/hdFileFolder.ResponseInitChunkedUpload'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Initialize chunked upload
      tags:
      - chunked-upload
  /files/stats:
    get:
      description: Returns current system resource usage and limits
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdFileFolder.ResponseResourceStats'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get resource statistics
      tags:
      - monitoring
  /files/upload:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a file to the specified folder
      parameters:
      - description: Parent folder path
        in: formData
        name: parentPath
        required: true
        type: string
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/hdFileFolder.ResponseFile'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload file
      tags:
      - files
  /files/upload-strategy:
    get:
      description: Returns recommended upload strategy based on file size
      parameters:
      - description: File size in bytes
        in: query
        name: fileSize
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdFileFolder.ResponseUploadStrategy'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get upload strategy
      tags:
      - files
  /folders:
    post:
      consumes:
      - application/json
      description: Creates a new folder in the file system
      parameters:
      - description: Folder details
        in: body
        name: folder
        required: true
        schema:
          $ref: '#/definitions/hdFileFolder.RequestCreateFolder'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/hdFileFolder.ResponseFolder'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create new folder
      tags:
      - folders
  /folders/{path}:
    delete:
      description: Deletes a folder and all its contents
      parameters:
      - description: Folder path
        in: path
        name: path
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdFileFolder.ResponsePath'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete folder
      tags:
      - folders
  /folders/{path}/move:
    put:
      consumes:
      - application/json
      description: Moves a folder to a new location
      parameters:
      - description: Folder path
        in: path
        name: path
        required: true
        type: string
      - description: New parent path
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/hdFileFolder.RequestMoveFolder'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdFileFolder.ResponsePath'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Move folder
      tags:
      - folders
  /folders/{path}/rename:
    put:
      consumes:
      - application/json
      description: Renames a folder at the specified path
      parameters:
      - description: Folder path
        in: path
        name: path
        required: true
        type: string
      - description: New folder name
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/hdFileFolder.RequestRenameFolder'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdFileFolder.ResponsePath'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Rename folder
      tags:
      - folders
  /folders/contents:
    post:
      consumes:
      - application/json
      description: Returns list of files and folders in specified path
      parameters:
      - description: Path and filter options
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/hdFileFolder.RequestGetFolder'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdFileFolder.ResponseGetFolder'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get folder contents
      tags:
      - folders
  /users:
    post:
      consumes:
      - application/json
      description: Register new user in your company (company admin only)
      parameters:
      - description: User registration payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/hdUser.RequestRegistrationUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdUser.ResponseUserDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Register new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Deactivates user account (soft delete)
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdUser.ResponseMessageDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Deactivate user
      tags:
      - users
    get:
      description: Returns a user by their UUID
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdUser.ResponseUserDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates user profile information
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: User update payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/hdUser.RequestUpdateUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdUser.ResponseUserDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
  /users/{id}/activate:
    put:
      description: Activates user account
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdUser.ResponseMessageDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Activate user
      tags:
      - users
  /users/{id}/company:
    put:
      consumes:
      - application/json
      description: Transfers user to different company (super admin only)
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Company transfer payload
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/hdUser.RequestTransferCompanyDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdUser.ResponseMessageDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Transfer user to another company
      tags:
      - users
  /users/{id}/password:
    put:
      consumes:
      - application/json
      description: Changes user password with old password verification
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Password change payload
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/hdUser.RequestChangePasswordDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdUser.ResponseMessageDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - users
  /users/{id}/role:
    put:
      consumes:
      - application/json
      description: Updates user role (company_admin only)
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Role update payload
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/hdUser.RequestUpdateRoleDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdUser.ResponseMessageDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user role
      tags:
      - users
  /users/all:
    get:
      description: Returns all users from all companies (super admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdUser.ResponseUsersDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users (super admin only)
      tags:
      - users
  /users/company:
    get:
      description: Returns all users from your company (company admin only)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdUser.ResponseUsersDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users in your company
      tags:
      - users
  /users/me:
    get:
      consumes:
      - application/json
      description: Getting information about yourself by JWT
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdUser.ResponseUserDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Get info about yourself
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update your own profile information
      parameters:
      - description: User update payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/hdUser.RequestUpdateUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdUser.ResponseUserDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update your profile
      tags:
      - users
  /users/me/password:
    put:
      consumes:
      - application/json
      description: Change your own password with old password verification
      parameters:
      - description: Password change payload
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/hdUser.RequestChangePasswordDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/hdUser.ResponseMessageDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change your password
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
